{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How to DAO with DAOstack Introduction DAOstack provides everything you need to start managing your community without a centralized authority. Launch your DAO - Decentralized Autonomous Organization using Adaptive, Modular and Upgradable governance structures powered by, DAOstack , a software stack for building Dapps (decentralized apps), DAOs (Decentralized Autonomous Organizations), and DAO tools. The Stack A DApp build with DAOstack DAOs consists of public blockchain layer ( Infra, Arc, Arc-Hive) which is the source of data caching layers (Subgraph) which allows fast access to the blockchain layer javascript library (Client) for application layer integration.","title":"Home"},{"location":"#how-to-dao-with-daostack","text":"","title":"How to DAO with DAOstack"},{"location":"#introduction","text":"DAOstack provides everything you need to start managing your community without a centralized authority. Launch your DAO - Decentralized Autonomous Organization using Adaptive, Modular and Upgradable governance structures powered by, DAOstack , a software stack for building Dapps (decentralized apps), DAOs (Decentralized Autonomous Organizations), and DAO tools.","title":"Introduction"},{"location":"#the-stack","text":"A DApp build with DAOstack DAOs consists of public blockchain layer ( Infra, Arc, Arc-Hive) which is the source of data caching layers (Subgraph) which allows fast access to the blockchain layer javascript library (Client) for application layer integration.","title":"The Stack"},{"location":"hackerkit/","text":"DAOs DAOs can be created for any conceivable collaborative purpose, from local political action to distributed manufacturing and sales. The goal of DAOstack is to make it as easy as possible to create and manage DAOs, and to use them to drive a new decentralized global economy (specifically, an economy that uses GEN, our collective attention token ). DAOstack Technologies has created an initial DAO called \"Genesis\" with the purpose of promoting the GEN/DAO ecosystem. Genesis is currently live on the Ethereum mainnet, has over 200 Reputation-holders who have executed over 170 proposals since August 2018, and can be accessed through \"Alchemy\" . Examples The hackers kit is equipped with several examples and sample projects, which we are working to maintain and expand. The goal for these examples is to help developers easily kickstart a new project, as well as to demonstrate some of the features included in each layer of the DAO stack. Starter Template This is a basic template you can use for kickstarting your project using the DAOstack platform. Here you can find the basic structure for using Arc, Client and Subgraph to build your project. Peep DAO This project is a Dapp for interacting with a DAO which has its own DAO social media account on Peepeth , a decentralized microblogging app. The Dapp allows a DAO post Peeps via a decentralized voting mechanism. DutchX DAO Bootstrap This project contains a minimal UI for participating in the bootstrap of the DutchX DAO. The bootstrapping process for a DAO is the process of distributing its initial reputation and tokens. The DutchX bootstrap process is a 3 months period during which users can do several actions, like locking tokens, in order to receive Reputation in the DutchX DAO. You can view the DutchX DAO bootstrapping contracts here . Firestarter DAO Example Firestarter is a community driven crowdsourcing platform, which utilizes DaoStack for governance of the projects. This is a striped down version of the project, which only showcases the DaoStack integration. Contact and Help DAOstack team members and open-source community members always make an effort to assist new projects. For any technical questions, please reach out to us via Discord at this link . If you have any questions or comments about this repository, please open an issue, and we'll do our best to help.","title":"Hacker-kit"},{"location":"hackerkit/#daos","text":"DAOs can be created for any conceivable collaborative purpose, from local political action to distributed manufacturing and sales. The goal of DAOstack is to make it as easy as possible to create and manage DAOs, and to use them to drive a new decentralized global economy (specifically, an economy that uses GEN, our collective attention token ). DAOstack Technologies has created an initial DAO called \"Genesis\" with the purpose of promoting the GEN/DAO ecosystem. Genesis is currently live on the Ethereum mainnet, has over 200 Reputation-holders who have executed over 170 proposals since August 2018, and can be accessed through \"Alchemy\" .","title":"DAOs"},{"location":"hackerkit/#examples","text":"The hackers kit is equipped with several examples and sample projects, which we are working to maintain and expand. The goal for these examples is to help developers easily kickstart a new project, as well as to demonstrate some of the features included in each layer of the DAO stack.","title":"Examples"},{"location":"hackerkit/#starter-template","text":"This is a basic template you can use for kickstarting your project using the DAOstack platform. Here you can find the basic structure for using Arc, Client and Subgraph to build your project.","title":"Starter Template"},{"location":"hackerkit/#peep-dao","text":"This project is a Dapp for interacting with a DAO which has its own DAO social media account on Peepeth , a decentralized microblogging app. The Dapp allows a DAO post Peeps via a decentralized voting mechanism.","title":"Peep DAO"},{"location":"hackerkit/#dutchx-dao-bootstrap","text":"This project contains a minimal UI for participating in the bootstrap of the DutchX DAO. The bootstrapping process for a DAO is the process of distributing its initial reputation and tokens. The DutchX bootstrap process is a 3 months period during which users can do several actions, like locking tokens, in order to receive Reputation in the DutchX DAO. You can view the DutchX DAO bootstrapping contracts here .","title":"DutchX DAO Bootstrap"},{"location":"hackerkit/#firestarter-dao-example","text":"Firestarter is a community driven crowdsourcing platform, which utilizes DaoStack for governance of the projects. This is a striped down version of the project, which only showcases the DaoStack integration.","title":"Firestarter DAO Example"},{"location":"hackerkit/#contact-and-help","text":"DAOstack team members and open-source community members always make an effort to assist new projects. For any technical questions, please reach out to us via Discord at this link . If you have any questions or comments about this repository, please open an issue, and we'll do our best to help.","title":"Contact and Help"},{"location":"migration/","text":"Migration package is useful for handling the migrations of DAOstack contracts and DAOs. You can use this tool to migrate DAOstack base contracts and DAOstack DAOs in production, test or developer mode","title":"Migration"},{"location":"gettingStarted/addNewDAOtoAlchemy/","text":"","title":"Setup Alchemy to play with your DAO"},{"location":"gettingStarted/createNewInterface/","text":"","title":"Create your own interface for DAOstack DAOs"},{"location":"gettingStarted/customSchemeSupportAlchemy/","text":"","title":"Add custom scheme support to Alchemy"},{"location":"gettingStarted/deployDAO/","text":"How to launch a new DAO? The core contracts required by a daostack DAO are already deployed by the DAOstack team on mainnet as well as testnet and the addresses are available in Migration.json . Though you need to deploy an Avatar, custom schemes (optional), native reputation and native token contract. Checkout Structure of DAO for details on Avatar, scheme, rep and token DAO can be deployed using Migration package either from CLI or using javascript. Example deployment setup and scripts are available in Starter-template Choose a name for your DAO and the native token and its symbol Do you want to use DAOcreator contract? Deploying a DAO with DAOcreator contract saves number of transactions to be signed by bundling up founder rep and token distribution (upto 100 members) in single tx and initial scheme registration in single tx Which schemes to include in the DAO? Schemes are the actions a DAOstack DAO can take when a proposal passes/fails. Currently supported schemes in Migrations package are: ContributionReward: Enables fund management proposals that distribute funds to beneficiary once the proposal passes GenericScheme: Enables Avatar to make arbitrary function calls to a specific contract. For eg use Avatar to submit a proposal to Genesis Alpha on behalf of your DAO SchemeRegistrar: Lets you submit a proposal to register more schemes (apart from initial schemes set at time of deployment) to the DAO GlobalConstraintRegistrar: Lets you submit a proposal to register more GlobalConstraints UpgradeScheme: Lets you upgrade the controller. Since Controller is not a Scheme it cannot be changed via SchemeRegistrar Find detailed documentation re Schemes in Arc Repo Ucontroller vs Controller? Refer to documentation on Controllers Decide on which Voting Machine to use and the parameters Set the voting machine parameters according to the needs of the organization. Currently you can deploy a DAO using migrations with only GenesisProtocol voting machine, which allows decision at timeout according to higher relative vote. You can find details about different voting machines supported by arc at https://github.com/daostack/arc/tree/master/docs/contracts/VotingMachines Who gets the initial rep and token in DAO? Edit the list of founder members\u2019 address along with the rep and/or token to be distributed initially. You may choose to give equal rep to all or have differentiated rep. Once you have decided on dao-params follow the instruction in Migrations or one of the examples to deploy your dao","title":"Deploy a DAO with existing actions"},{"location":"gettingStarted/deployDAO/#how-to-launch-a-new-dao","text":"The core contracts required by a daostack DAO are already deployed by the DAOstack team on mainnet as well as testnet and the addresses are available in Migration.json . Though you need to deploy an Avatar, custom schemes (optional), native reputation and native token contract. Checkout Structure of DAO for details on Avatar, scheme, rep and token DAO can be deployed using Migration package either from CLI or using javascript. Example deployment setup and scripts are available in Starter-template Choose a name for your DAO and the native token and its symbol Do you want to use DAOcreator contract? Deploying a DAO with DAOcreator contract saves number of transactions to be signed by bundling up founder rep and token distribution (upto 100 members) in single tx and initial scheme registration in single tx Which schemes to include in the DAO? Schemes are the actions a DAOstack DAO can take when a proposal passes/fails. Currently supported schemes in Migrations package are: ContributionReward: Enables fund management proposals that distribute funds to beneficiary once the proposal passes GenericScheme: Enables Avatar to make arbitrary function calls to a specific contract. For eg use Avatar to submit a proposal to Genesis Alpha on behalf of your DAO SchemeRegistrar: Lets you submit a proposal to register more schemes (apart from initial schemes set at time of deployment) to the DAO GlobalConstraintRegistrar: Lets you submit a proposal to register more GlobalConstraints UpgradeScheme: Lets you upgrade the controller. Since Controller is not a Scheme it cannot be changed via SchemeRegistrar Find detailed documentation re Schemes in Arc Repo Ucontroller vs Controller? Refer to documentation on Controllers Decide on which Voting Machine to use and the parameters Set the voting machine parameters according to the needs of the organization. Currently you can deploy a DAO using migrations with only GenesisProtocol voting machine, which allows decision at timeout according to higher relative vote. You can find details about different voting machines supported by arc at https://github.com/daostack/arc/tree/master/docs/contracts/VotingMachines Who gets the initial rep and token in DAO? Edit the list of founder members\u2019 address along with the rep and/or token to be distributed initially. You may choose to give equal rep to all or have differentiated rep. Once you have decided on dao-params follow the instruction in Migrations or one of the examples to deploy your dao","title":"How to launch a new DAO?"},{"location":"gettingStarted/deployDAOcustomActions/","text":"","title":"Deploy a DAO and enable custom actions"},{"location":"gettingStarted/setupAlchemyDevMode/","text":"Developing With Alchemy Prerequisites docker = 18.06.1-c docker-compose = 1.22.0 node = 10.16.0 npm = 6.9.0 Overview Alchemy uses Client.js for reading/inferencing blockchain data via DAOstack Subgraph writing/modifying state of Arc contracts Following figure shows interaction of Alchemy with rest of the stack Boilerplate 1 2 3 git clone https : // github . com / daostack / alchemy . git cd alchemy npm ci Setup Alchemy with Ganache (mode: development) 1 2 docker - compose build docker - compose up - d The above commands will build docker images and start the following services locally: alchemy = react frontend with webpack-dev-server alchemy-server = for storing proposal information for quick access graph-node = for handling events from blockchain as described in subgraph ganache = dev blockchain with some test DAOs deployed and loaded with GEN and Eth subgraph-ipfs = subgraph mappings on ipfs node subgraph-postgres = db for caching events based on subgraph and later fetched via GraphQL redis alchemy-postgres Import test accounts that are setup with GEN and ETH to your metamask. You can get the account details by: 1 docker logs alchemy_ganache_1 | head - 35 Now your playground is ready for developing. TODO: Currently webpack does not detect changes in all components and rebuilds only if top-level src/file is changed. For now you can touch the any file in top-level and this should trigger rebuild NOTE: If the feature integration requires you to interact with outside contracts (e.g. uniswap widget integration would require uniswap contracts), then you can simply deploy those contracts to same ganache container using truffle or your own deployment script. See Client.js documentation for more integration details Setup Alchemy with Testnet (mode: staging) After the boilerplate steps you would need to change the docker-compose.yml , webpack.docker.config.js and .env Choose from one of the following setup for testnet to start playing and integrating features to Alchemy: Use daostack rinkeby subgraph Run graph-node locally with already supported schemes Run graph-node locally with new/not yet supported schemes Use daostack rinkeby subgraph Choose this if, using rinkeby testnet working with existing whitelisted DAOs on daostack subgraph Make following changes: Update docker-compose.yml - remove link to graph-node in service alchemy - remove services graph-node , ipfs , postgres4graphnode and ganache Update webpack.docker.config.js - Change NODE_ENV from development to staging Build and run 1 2 docker - compose build docker - compose up - d Run graph-node locally with already supported schemes Choose this if, using any of the already supported schemes by client alchemy playing with DAO you just deployed and to any of the testnet and not yet whitelisted by daostack using any testnet Make following changes: Clone subgraph repo and start-graph node locally 1 2 3 4 5 6 7 8 9 10 11 git clone git @github . com : daostack / subgraph . git cd subgraph npm i touch . env echo network = network-name . env # eg rinkeby echo subgraph = subgraph-name echo postgres_password = letmein echo ethereum_node = https://rinkeby.infura.io/v3/e0cdf3bfda9b468fa908aa6ab03d5ba2 npm run docker : run - rinkeby Update your DAO details and deploy subgraph 1 2 3 4 touch daos / rinkeby / DAO - Name . json # Add your DAO details in ` DAO - Name . json file # refer to any of existing file in daos / rinkeby folder npm run deploy { migrationFile : ../migration.json } Update docker-compose.yml - remove link to graph-node in service alchemy - remove services graph-node , ipfs , postgres4graphnode and ganache Update webpack.docker.config.js , add following process variables 'ARC_GRAPHQLHTTPPROVIDER': JSON.stringify('http://127.0.0.1:8000/subgraphs/name/daostack'), 'ARC_GRAPHQLWSPROVIDER': JSON.stringify('ws://127.0.0.1:8001/subgraphs/name/daostack'), 'ARC_IPFSPROVIDER': JSON.stringify('localhost') Build and run 1 2 docker - compose build docker - compose up - d Note: You can also deploy subgraph to graph explorer. Step 1 2 will be replaced by deploy to graph-explorer and Step 4 will be updated to have corresponding url Run graph-node locally with new/not yet supported schemes","title":"Add features to Alchemy interface"},{"location":"gettingStarted/setupAlchemyDevMode/#developing-with-alchemy","text":"","title":"Developing With Alchemy"},{"location":"gettingStarted/setupAlchemyDevMode/#prerequisites","text":"docker = 18.06.1-c docker-compose = 1.22.0 node = 10.16.0 npm = 6.9.0","title":"Prerequisites"},{"location":"gettingStarted/setupAlchemyDevMode/#overview","text":"Alchemy uses Client.js for reading/inferencing blockchain data via DAOstack Subgraph writing/modifying state of Arc contracts Following figure shows interaction of Alchemy with rest of the stack","title":"Overview"},{"location":"gettingStarted/setupAlchemyDevMode/#boilerplate","text":"1 2 3 git clone https : // github . com / daostack / alchemy . git cd alchemy npm ci","title":"Boilerplate"},{"location":"gettingStarted/setupAlchemyDevMode/#setup-alchemy-with-ganache-mode-development","text":"1 2 docker - compose build docker - compose up - d The above commands will build docker images and start the following services locally: alchemy = react frontend with webpack-dev-server alchemy-server = for storing proposal information for quick access graph-node = for handling events from blockchain as described in subgraph ganache = dev blockchain with some test DAOs deployed and loaded with GEN and Eth subgraph-ipfs = subgraph mappings on ipfs node subgraph-postgres = db for caching events based on subgraph and later fetched via GraphQL redis alchemy-postgres Import test accounts that are setup with GEN and ETH to your metamask. You can get the account details by: 1 docker logs alchemy_ganache_1 | head - 35 Now your playground is ready for developing. TODO: Currently webpack does not detect changes in all components and rebuilds only if top-level src/file is changed. For now you can touch the any file in top-level and this should trigger rebuild NOTE: If the feature integration requires you to interact with outside contracts (e.g. uniswap widget integration would require uniswap contracts), then you can simply deploy those contracts to same ganache container using truffle or your own deployment script. See Client.js documentation for more integration details","title":"Setup Alchemy with Ganache (mode: development)"},{"location":"gettingStarted/setupAlchemyDevMode/#setup-alchemy-with-testnet-mode-staging","text":"After the boilerplate steps you would need to change the docker-compose.yml , webpack.docker.config.js and .env Choose from one of the following setup for testnet to start playing and integrating features to Alchemy: Use daostack rinkeby subgraph Run graph-node locally with already supported schemes Run graph-node locally with new/not yet supported schemes","title":"Setup Alchemy with Testnet (mode: staging)"},{"location":"gettingStarted/setupAlchemyDevMode/#use-daostack-rinkeby-subgraph","text":"Choose this if, using rinkeby testnet working with existing whitelisted DAOs on daostack subgraph Make following changes: Update docker-compose.yml - remove link to graph-node in service alchemy - remove services graph-node , ipfs , postgres4graphnode and ganache Update webpack.docker.config.js - Change NODE_ENV from development to staging Build and run 1 2 docker - compose build docker - compose up - d","title":"Use daostack rinkeby subgraph"},{"location":"gettingStarted/setupAlchemyDevMode/#run-graph-node-locally-with-already-supported-schemes","text":"Choose this if, using any of the already supported schemes by client alchemy playing with DAO you just deployed and to any of the testnet and not yet whitelisted by daostack using any testnet Make following changes: Clone subgraph repo and start-graph node locally 1 2 3 4 5 6 7 8 9 10 11 git clone git @github . com : daostack / subgraph . git cd subgraph npm i touch . env echo network = network-name . env # eg rinkeby echo subgraph = subgraph-name echo postgres_password = letmein echo ethereum_node = https://rinkeby.infura.io/v3/e0cdf3bfda9b468fa908aa6ab03d5ba2 npm run docker : run - rinkeby Update your DAO details and deploy subgraph 1 2 3 4 touch daos / rinkeby / DAO - Name . json # Add your DAO details in ` DAO - Name . json file # refer to any of existing file in daos / rinkeby folder npm run deploy { migrationFile : ../migration.json } Update docker-compose.yml - remove link to graph-node in service alchemy - remove services graph-node , ipfs , postgres4graphnode and ganache Update webpack.docker.config.js , add following process variables 'ARC_GRAPHQLHTTPPROVIDER': JSON.stringify('http://127.0.0.1:8000/subgraphs/name/daostack'), 'ARC_GRAPHQLWSPROVIDER': JSON.stringify('ws://127.0.0.1:8001/subgraphs/name/daostack'), 'ARC_IPFSPROVIDER': JSON.stringify('localhost') Build and run 1 2 docker - compose build docker - compose up - d Note: You can also deploy subgraph to graph explorer. Step 1 2 will be replaced by deploy to graph-explorer and Step 4 will be updated to have corresponding url","title":"Run graph-node locally with already supported schemes"},{"location":"gettingStarted/setupAlchemyDevMode/#run-graph-node-locally-with-newnot-yet-supported-schemes","text":"","title":"Run  graph-node locally with new/not yet supported schemes"},{"location":"gettingStarted/setupGenericScheme/","text":"Setup Generic Scheme for a DAO When to use Generic Scheme Generic Scheme allows a DAO to interact with other contracts and execute any method from the contract if the DAO decides to How to register Generic Scheme with a DAO DAO only uses the schemes that are registered with its controller. There are two ways to register a scheme: While forging/deploying the DAO as part of initial set of schemes While proposing the new scheme to DAO via Scheme Registrar for the DAO. Setup Generic Scheme while deploying DAO Refer to How to deploy DAO Setup Generic Scheme via Scheme Registrar Set Generic Scheme to interact with your contract You can use GenericScheme's setParameters method to setup which contract it will interact with. Following is a short script that describes how to do this 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 const genericScheme = new web3 . eth . Contract ( require ( @daostack/arc/build/contracts/UGenericScheme.json ) . abi , UGenericSchemeAddress , // address from https : // github . com / daostack / migration / blob / master / migration . json { from , gas , gasPrice } ) // Following are example values , Please change appropriately // Refer https : // daostack . zendesk . com / hc / en - us / sections / 360000535638 - Genesis - Protocol const voteParams = { boostedVotePeriodLimit : 345600 , daoBountyConst : 10 , minimumDaoBountyGWei : 150000000000 , queuedVotePeriodLimit : 2592000 , queuedVoteRequiredPercentage : 50 , preBoostedVotePeriodLimit : 86400 , proposingRepRewardGwei : 50000000000 , quietEndingPeriod : 172800 , thresholdConst : 1200 , voteOnBehalf : 0x0000000000000000000000000000000000000000 , votersReputationLossRatio : 4 , activationTime : 0 } // Get address from https : // github . com / daostack / migration / blob / master / migration . json const votingMachineAddress = 0xaddress-of-VotingMachine-of-DAO-on-given-network // For eg if you want this Generic Scheme to enable DAO to interact with Bounties Network // then targetContract would be the address of Bounties Network s respective contract const targetContractAddress = 0xaddress-of-contract-this-will-interact-with // paramHash will be useful in later step so lets log it const paramHash = genericScheme . methods . setParameters ( voteParams , votingMachineAddress , targetContractAddress ) . call () console . log ( paramHash ) genericScheme . methods . setParameters ( voteParams , votingMachineAddress , targetContractAddress ) . send () Submit new proposal to Scheme Registrar via Alchemy UI On Alchmey landing page choose the DAO to which you wish to register the scheme Visit DAO's Home page and choose Scheme Registrar Click New Proposal , this will open a popup Select Add Scheme on the popup sidebar (on left) Give appropriate title, description, url Put the address of Generic Scheme contract deployed Note : If DAO does not have a Generic Scheme registered to it you can use the already deployed instance of GenericScheme find the address for correct network here , else you will have to deploy new instance of Generic Scheme. Enter the paramHash you got here In permissions section choose Call genericCall on behalf of Submit Proposal and sign off the transaction If the DAO agrees then your Generic Scheme with ability to interact with the targetContract will be registered to the DAO How to get your Generic Scheme shown in Alchemy You will have to submit PR to Alchemy repo with details of your scheme. So if this was Generic Scheme to interact with Bounties Network we will create, say, Bounties.json file and put here 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Bounties . json { name : Bounties , address : { main : [ 0xtarget-contract-address-on-mainnet ], rinkeby : [], private : [] }, actions : [ { id : this-is-a-method-on-contract , label : this will appear on Alchemy UI for submitting proposal for this action , description : Describe what this action will do on-chain when proposal is passed by DAO , notes : , fields : [ { label : label for this field , name : name-of-field-in-abi , placeholder : Default to show on UI for reference }, { // more feilds if any }, ], abi : {}, }, { // more methods of contract if any } ], }","title":"Setup Generic Scheme for a DAO"},{"location":"gettingStarted/setupGenericScheme/#setup-generic-scheme-for-a-dao","text":"","title":"Setup Generic Scheme for a DAO"},{"location":"gettingStarted/setupGenericScheme/#when-to-use-generic-scheme","text":"Generic Scheme allows a DAO to interact with other contracts and execute any method from the contract if the DAO decides to","title":"When to use Generic Scheme"},{"location":"gettingStarted/setupGenericScheme/#how-to-register-generic-scheme-with-a-dao","text":"DAO only uses the schemes that are registered with its controller. There are two ways to register a scheme: While forging/deploying the DAO as part of initial set of schemes While proposing the new scheme to DAO via Scheme Registrar for the DAO.","title":"How to register Generic Scheme with a DAO"},{"location":"gettingStarted/setupGenericScheme/#setup-generic-scheme-while-deploying-dao","text":"Refer to How to deploy DAO","title":"Setup Generic Scheme while deploying DAO"},{"location":"gettingStarted/setupGenericScheme/#setup-generic-scheme-via-scheme-registrar","text":"","title":"Setup Generic Scheme via Scheme Registrar"},{"location":"gettingStarted/setupGenericScheme/#set-generic-scheme-to-interact-with-your-contract","text":"You can use GenericScheme's setParameters method to setup which contract it will interact with. Following is a short script that describes how to do this 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 const genericScheme = new web3 . eth . Contract ( require ( @daostack/arc/build/contracts/UGenericScheme.json ) . abi , UGenericSchemeAddress , // address from https : // github . com / daostack / migration / blob / master / migration . json { from , gas , gasPrice } ) // Following are example values , Please change appropriately // Refer https : // daostack . zendesk . com / hc / en - us / sections / 360000535638 - Genesis - Protocol const voteParams = { boostedVotePeriodLimit : 345600 , daoBountyConst : 10 , minimumDaoBountyGWei : 150000000000 , queuedVotePeriodLimit : 2592000 , queuedVoteRequiredPercentage : 50 , preBoostedVotePeriodLimit : 86400 , proposingRepRewardGwei : 50000000000 , quietEndingPeriod : 172800 , thresholdConst : 1200 , voteOnBehalf : 0x0000000000000000000000000000000000000000 , votersReputationLossRatio : 4 , activationTime : 0 } // Get address from https : // github . com / daostack / migration / blob / master / migration . json const votingMachineAddress = 0xaddress-of-VotingMachine-of-DAO-on-given-network // For eg if you want this Generic Scheme to enable DAO to interact with Bounties Network // then targetContract would be the address of Bounties Network s respective contract const targetContractAddress = 0xaddress-of-contract-this-will-interact-with // paramHash will be useful in later step so lets log it const paramHash = genericScheme . methods . setParameters ( voteParams , votingMachineAddress , targetContractAddress ) . call () console . log ( paramHash ) genericScheme . methods . setParameters ( voteParams , votingMachineAddress , targetContractAddress ) . send ()","title":"Set Generic Scheme to interact with your contract"},{"location":"gettingStarted/setupGenericScheme/#submit-new-proposal-to-scheme-registrar-via-alchemy-ui","text":"On Alchmey landing page choose the DAO to which you wish to register the scheme Visit DAO's Home page and choose Scheme Registrar Click New Proposal , this will open a popup Select Add Scheme on the popup sidebar (on left) Give appropriate title, description, url Put the address of Generic Scheme contract deployed Note : If DAO does not have a Generic Scheme registered to it you can use the already deployed instance of GenericScheme find the address for correct network here , else you will have to deploy new instance of Generic Scheme. Enter the paramHash you got here In permissions section choose Call genericCall on behalf of Submit Proposal and sign off the transaction If the DAO agrees then your Generic Scheme with ability to interact with the targetContract will be registered to the DAO","title":"Submit new proposal to Scheme Registrar via Alchemy UI"},{"location":"gettingStarted/setupGenericScheme/#how-to-get-your-generic-scheme-shown-in-alchemy","text":"You will have to submit PR to Alchemy repo with details of your scheme. So if this was Generic Scheme to interact with Bounties Network we will create, say, Bounties.json file and put here 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Bounties . json { name : Bounties , address : { main : [ 0xtarget-contract-address-on-mainnet ], rinkeby : [], private : [] }, actions : [ { id : this-is-a-method-on-contract , label : this will appear on Alchemy UI for submitting proposal for this action , description : Describe what this action will do on-chain when proposal is passed by DAO , notes : , fields : [ { label : label for this field , name : name-of-field-in-abi , placeholder : Default to show on UI for reference }, { // more feilds if any }, ], abi : {}, }, { // more methods of contract if any } ], }","title":"How to get your Generic Scheme shown in Alchemy"},{"location":"gettingStarted/setupNewScheme/","text":"What is a Scheme Scheme is an action a DAO deployed with DAOstack can be enabled to take. Arc repo have examples of some Universal Scheme Deploy Scheme Contract","title":"Add new scheme for a DAO"},{"location":"gettingStarted/setupNewScheme/#what-is-a-scheme","text":"Scheme is an action a DAO deployed with DAOstack can be enabled to take. Arc repo have examples of some Universal Scheme","title":"What is a Scheme"},{"location":"gettingStarted/setupNewScheme/#deploy-scheme-contract","text":"","title":"Deploy Scheme Contract"},{"location":"stack/alchemy/alchemyIntro/","text":"The Client library facilitates development of \"Dapps\" (Decentralized applications) for interacting with DAOs. DAOstack has built its own Dapp called Alchemy , a front-end interface for DAOs , or more specifically, for budget management in decentralized organizations. Alchemy allows end users to make collaborative budgeting decisions and allocations using the Holographic Consensus protocol . You can find the Alchemy repo at github.com/daostack/alchemy . A second Dapp built by DAOstack is Vanille (enable MetaMask). Vanille enables users to create and interact with DAOs before moving to a dedicated interface like Alchemy. You can find the Vanille repo here: https://github.com/daostack/vanille . Should I work at this level? Build at the Dapp level if you want to create new ways to interact with existing DAOs and DAOstack smart contracts, e.g. a multi-DAO explorer for GEN predictors or a new DAO creation app.","title":"DApps/Alchemy"},{"location":"stack/alchemy/alchemyIntro/#should-i-work-at-this-level","text":"Build at the Dapp level if you want to create new ways to interact with existing DAOs and DAOstack smart contracts, e.g. a multi-DAO explorer for GEN predictors or a new DAO creation app.","title":"Should I work at this level?"},{"location":"stack/arc/arcIntro/","text":"Arc is a Solidity smart contract library for building DAOs. To get a good understanding of how the Arc framework is built, you can go to this blog post . Arc uses Infra to provide decentralized organizations with voting machines and voting rights management systems. DAOs built with Arc have a few basic contract components: Avatar - The DAO's \"account.\" This contract represents the address of the DAO and holds its assets. Reputation - Voting in Arc is done mainly using Reputation. Reputation can be distributed and redistributed only by DAO decision, and it is generally given (via vote) to an agent according to their performance and contribution to a DAO. Token - Each DAO may have its own token, which can be used in any way the DAO would like. Controller - The controller is the \"Access Control\" of the DAO, managing who can interact with which DAO functions and enforcing the DAO's constraints. Schemes - Schemes are a DAO's \"actions\": anything a DAO should act upon needs to be written and authorized by the controller as a scheme. Schemes might be used to help a DAO: propose and make investments, give reputation to agents, upgrade the DAO's contracts, register new schemes and constraints, etc. Global Constraints - Global constraints are limitations on a DAO's actions. When executing a scheme, the controller checks the constraints to see if the action violates them, and blocks the execution if it does. Some examples for constraints might be: the token supply can't be increased over 1M tokens, the organization won't use more than 60% of its funds at once, etc. Arc utilizes the concept of \"Universal\" contracts : contracts which are deployed once, and then can be used by any number of DAOs simultaneously, saving gas and deployment costs. Schemes and constraints can both be used in this way. To use the already deployed contracts, you can either use Client, which maintains easy access to all universal Arc contracts, or you can use Migration.json to view the addresses of the universal contracts of the latest arc version on the mainnet, Kovan, Rinkeby and Ganache* All contracts listed in the file are universal, meaning that users should use them when needed and not redeploy them. * Please note that the Ganache addresses are based on the DAOstack commands for running and deploying Arc to a local Ganache network, which means those addresses might change if you are using a different method to run Ganache or deploy Arc. Should I work at this level? Using Arc is not necessary to deploy a DAO (you can do this with Migrations currently and in the future as an end user of Dapps), but you might want to work on this layer if you need your DAO to have a unique action, constraint, or voting process that is not yet implemented on Arc. You can find the complete Arc docs here: https://daostack.github.io/arc","title":"Arc"},{"location":"stack/arc/arcIntro/#should-i-work-at-this-level","text":"Using Arc is not necessary to deploy a DAO (you can do this with Migrations currently and in the future as an end user of Dapps), but you might want to work on this layer if you need your DAO to have a unique action, constraint, or voting process that is not yet implemented on Arc. You can find the complete Arc docs here: https://daostack.github.io/arc","title":"Should I work at this level?"},{"location":"stack/client/clientIntro/","text":"Client is a library that facilitates access to Arc contracts without having to directly interact with the Ethereum blockchain. It provides functions to interact with DAOstack contracts to vote, propose, stake and execute proposals. Client library is also a wrapper around DAOstack subgraph . It enable developers to interact with subgraph and execute various generic graph queries to access proposals, daos and other complex entities Using Client, JavaScript/TypeScript developers can easily write scripts or applications which can interact with existing DAOs, submit proposals to DAOs, vote and stake on proposals, execute the resulting decisions, manage agent reputations. This is particularly helpful for developers who want to get the advantages of decentralized governance on the blockchain without dealing directly with a smart contract language. Should I work at this level? You should use Client whenever you want to use JavaScript or TypeScript to interact with Arc contracts for voting, proposing etc or to execute generic GraphQL queries on subgraph for accessing blockchain data. If you are interacting with custom Arc contracts or custom subgraph, then you might have to write your own Web3 library to interact with contracts and/or query the subgraph.","title":"Client"},{"location":"stack/client/clientIntro/#should-i-work-at-this-level","text":"You should use Client whenever you want to use JavaScript or TypeScript to interact with Arc contracts for voting, proposing etc or to execute generic GraphQL queries on subgraph for accessing blockchain data. If you are interacting with custom Arc contracts or custom subgraph, then you might have to write your own Web3 library to interact with contracts and/or query the subgraph.","title":"Should I work at this level?"},{"location":"stack/infra/infraIntro/","text":"Infra is a Solidity smart contract library containing the core building blocks of decentralized governance. Infra contracts can be integrated into any application regardless of its architecture. Infra has two main components: Voting Machines - A voting machine is a universal contract which can operate the voting process for any organization. Each voting machine follows its own predifined rules for the decision making and execution process. Rules for voting machines can be implemented for any voting process, from a simple protocol like an \"Absolute Vote\" (where 51% of the voting power should approve it in order for the decision to pass), or more sophisticated protocols like the Holographic Consensus voting protocol. Voting Rights Management - A voting rights management system determines how voting rights are distributed. Any voting rights management system must have \"balances\" which represents the voting power each participant holds. There are 2 main approaches for managing voting rights: token-based voting and reputation-based voting. The main technical difference between the two is that tokens are transferable (i.e. tradable) while reputation is non-transferable. Another big difference which may appear (depending on implementation) is that a token is a property which cannot be taken while reputation may be redistributed by the organization itself. For most cases, we reccomend using the reputation-based voting model, however, Infra allows any voting right management system to be built. Should I work at this level? Build on Infra if you need new or modified decentralized governance primitives, such as voting machines and voting rights management systems.","title":"Infra"},{"location":"stack/infra/infraIntro/#should-i-work-at-this-level","text":"Build on Infra if you need new or modified decentralized governance primitives, such as voting machines and voting rights management systems.","title":"Should I work at this level?"},{"location":"stack/subgraph/subgraphIntro/","text":"Subgraph indexes the blockchain data and stores it in postgres database for easy and quick access. The subgraph runs on a Graph Node which is a server that developers can run local or remote. The data store can be queried by GraphQL endpoints. DAOstack subgraph is based on graphprotocol, checkout TheGraph for more details. TheGraph opens their server to others and you can find daostack subgraph and subgraphs from many other projects at Graph Explorer Should I work at this level? If you are writing new Arc contracts which are not indexed by DAOstack subgraph or want to fetch data of existing Arc contracts in a way other than that specified in DAOstack subgraph's schema.graphql , then you should write your own subgraph schema and mappings","title":"Subgraph"},{"location":"stack/subgraph/subgraphIntro/#should-i-work-at-this-level","text":"If you are writing new Arc contracts which are not indexed by DAOstack subgraph or want to fetch data of existing Arc contracts in a way other than that specified in DAOstack subgraph's schema.graphql , then you should write your own subgraph schema and mappings","title":"Should I work at this level?"}]}